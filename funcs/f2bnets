f2bnets(){

    print_help(){
        print ""
        print f2bnets usage: f2bnets \[-n \] \[-a\] \[--no-cidr\] \[--no-geo\]
        print
        print "  -n N           specify the number N of top banned networks to display"
        print "       --no-cidr do not display the banned networks in cidr notation"
        print "       --no-geo  do not display the geolocation-based country of the banned networks"
        print "  -a             search through all logs (included rotated log)"
        print "                 [default is to search only /var/log/fail2ban.log]"
        return -1
    }

    # Function to retrive geolocation information for a given IP address or network
    # example usage: get_country 192.168.1.1
    get_country(){


    curl -s http://api.ipstack.com/$1\?access_key\=4f90bf0da6f5f385c7d6513c18eeecf8 | sed -e 's/,/\n/g' | grep country_name | cut -f2 -d: | sed -e 's/\"//g'
    }


    # Parse arguments
    zparseopts -D -E -- n:=num a=all_logs h+=help -help+=help -no-cidr=net -no-geo=geo
    #echo "$*"

    [[ -n $help ]] && { print_help; return -1 }
    [[ "x$*" == "x" ]] || {echo "Invalid option(s) $*"
    print_help 
    return -1
    }


    #    print num: $num[2]   all: $all_logs[1]
    #    [[ -z $num ]] && print 'num -z is true' || print 'num -z is false'
    #    [[ -z $all_logs ]] && print 'all_logs -z is true' || print 'all_logs -z is false'

    #If a size argument was given for the number of IPs to display, then use it;
    #otherwise, default to 10
    [[ -z $num ]] && _num=10 || _num=$num[2]
    [[ -z $all_logs ]] && logs=( /var/log/fail2ban.log ) || logs=( /var/log/fail2ban.log* )

    #    [[ -z $all_logs ]] && {print $logs; return} || {print $logs; return}

    # If the array of IP addresses exists (it shouldn't) delete it
    [[ -v ips ]] && unset ips

    #    logs=( /var/log/fail2ban.log /var/log/fail2ban.log.1)
    ips=($(sudo zgrep Ban $logs | zgrep -v Restore | cut -f 16 -d' ' | cut -f 1,2 -d'.'))

    # If the associative array already exists (it shouldn't), delete it
    [[ -v ipcount ]] && unset ipcount

    # Create an associative array to hold the IPs addresses and the number of times
    # each appears in the fail2ban logs with 'Ban' action
    declare -A ipcount

    # Iterate through the array of IP addresses.  If there is an entry in the array
    # with the IP address as a key, increment it; otherwise set it to 1
    {
    for i in $ips; do
        [[ -z ipcount[$i] ]] && ipcount[$i]=1 || ipcount[$i]=$(( ipcount[$i] + 1 ))
    done
    }

    # Set the suffix to "" if option --no-cidr is specified 
    # otherwise append the output in cidr notation
    [[ -n $net ]] && suffix="" || suffix=".0.0/16"

    # Print the top X IPs addresses and their frequency, save the data into a new array
    ips_trunc=( $({for k in ${(@k)ipcount}; print "$ipcount[$k] $k"} | sort -rn | head -n $_num) )

    # Arrays used for geolocation
    icnt=()
    iip=()
    igeo=()

    # step through the array. The odd-numbered elements are the counts and the even elements are the ip addresses
    # save these into new arrays, along with the geolocation data
    for (( i=1; i <= $#ips_trunc; i+=2 )){
    	icnt+=($ips_trunc[$i])
	iip+=($ips_trunc[$(( $i + 1 ))])
	[[ -n $geo ]] && igeo+=() || igeo+=( $(get_country $ips_trunc[$(( $i + 1 ))].0.0) )
    }

 #   for (( i=1; i <= $#iip; i++ )){
 #   	print "$icnt[$i] $iip[$i]         $igeo[$i]"
 #   }

    # temporary output variable used for formatting
    output=$( {
       for (( i=1; i <= $#iip; i++ )){
          print "$icnt[$i] $iip[$i] $igeo[$i]"
       }
} )
    # print data, formatted as a table
    print $output | column -t

    # Delete working variables
    unset ips
    unset ipcount
    unset ips_trunc
    unset icnt
    unset iip
    unset igeo
    unset output
}
